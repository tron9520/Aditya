#include <iostream>

class Complex {
private:
    double real;
    double imag;

public:
    // Constructors
    Complex() : real(0.0), imag(0.0) {}
    Complex(double r, double i) : real(r), imag(i) {}

    // Operator overloading: Addition
    Complex operator+(const Complex& c) {
        return Complex(real + c.real, imag + c.imag);
    }

    // Operator overloading: Multiplication
    Complex operator*(const Complex& c) {
        return Complex(real * c.real - imag * c.imag, real * c.imag + imag * c.real);
    }

    // Operator overloading: Output stream
    friend std::ostream& operator<<(std::ostream& os, const Complex& c) {
        os << c.real;
        if (c.imag >= 0)
            os << "+";
        os << c.imag << "i";
        return os;
    }

    // Operator overloading: Input stream
    friend std::istream& operator>>(std::istream& is, Complex& c) {
        std::cout << "Enter real part: ";
        is >> c.real;
        std::cout << "Enter imaginary part: ";
        is >> c.imag;
        return is;
    }
};

int main() {
    Complex c1(2.0, 3.0);
    Complex c2(4.0, -1.5);

    // Testing addition
    Complex sum = c1 + c2;
    std::cout << "Sum: " << sum << std::endl;

    // Testing multiplication
    Complex product = c1 * c2;
    std::cout << "Product: " << product << std::endl;

    // Testing input/output operators
    Complex c3;
    std::cout << "Enter a complex number:" << std::endl;
    std::cin >> c3;
    std::cout << "You entered: " << c3 << std::endl;

    return 0;
}
